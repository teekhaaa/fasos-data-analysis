DROP TABLE IF EXISTS driver;
CREATE TABLE driver (driver_id INT, reg_date DATE);
INSERT INTO driver (driver_id, reg_date) 
VALUES (1, '2021-01-01'), (2, '2021-01-03'), (3, '2021-01-08'), (4, '2021-01-15');

drop table if exists ingredients;
CREATE TABLE ingredients(ingredients_id integer,ingredients_name varchar(60)); 

INSERT INTO ingredients(ingredients_id ,ingredients_name) 
 VALUES (1,'BBQ Chicken'),
(2,'Chilli Sauce'),
(3,'Chicken'),
(4,'Cheese'),
(5,'Kebab'),
(6,'Mushrooms'),
(7,'Onions'),
(8,'Egg'),
(9,'Peppers'),
(10,'schezwan sauce'),
(11,'Tomatoes'),
(12,'Tomato Sauce');

drop table if exists rolls;
CREATE TABLE rolls(roll_id integer,roll_name varchar(30)); 

INSERT INTO rolls(roll_id ,roll_name) 
 VALUES (1	,'Non Veg Roll'),
(2	,'Veg Roll');

drop table if exists rolls_recipes;
CREATE TABLE rolls_recipes(roll_id integer,ingredients varchar(24)); 

INSERT INTO rolls_recipes(roll_id ,ingredients) 
 VALUES (1,'1,2,3,4,5,6,8,10'),
(2,'4,6,7,9,11,12');

DROP TABLE IF EXISTS driver_order;
CREATE TABLE driver_order (order_id INT, driver_id INT, pickup_time DATETIME, distance VARCHAR(7), duration VARCHAR(10), cancellation VARCHAR(23));

INSERT INTO driver_order (order_id, driver_id, pickup_time, distance, duration, cancellation) 
VALUES (1, 1, '2021-01-01 18:15:34', '20km', '32 minutes', ''),
    (2, 1, '2021-01-01 19:10:54', '20km', '27 minutes', ''),
    (3, 1, '2021-01-03 00:12:37', '13.4km', '20 mins', 'NaN'),
    (4, 2, '2021-01-04 13:53:03', '23.4', '40', 'NaN'),
    (5, 3, '2021-01-08 21:10:57', '10', '15', 'NaN'),
    (6, 3, NULL, NULL, NULL, 'Cancellation'),
    (7, 2, '2021-01-08 21:30:45', '25km', '25mins', NULL),
    (8, 2, '2021-01-10 00:15:02', '23.4 km', '15 minute', NULL),
    (9, 2, NULL, NULL, NULL, 'Customer Cancellation'),
    (10, 1, '2021-01-11 18:50:20', '10km', '10minutes', NULL);

DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (order_id INT, customer_id INT, roll_id INT, not_include_items VARCHAR(4), extra_items_included VARCHAR(4), order_date DATETIME);
INSERT INTO customer_orders (order_id, customer_id, roll_id, not_include_items, extra_items_included, order_date)
VALUES (1, 101, 1, '', '', '2021-01-01 18:05:02'), (2, 101, 1, '', '', '2021-01-01 19:00:52'), (3, 102, 1, '', '', '2021-01-02 23:51:23'),
    (3, 102, 2, '', 'NaN', '2021-01-02 23:51:23'), (4, 103, 1, '4', '', '2021-01-04 13:23:46'), (4, 103, 1, '4', '', '2021-01-04 13:23:46'),
    (4, 103, 2, '4', '', '2021-01-04 13:23:46'), (5, 104, 1, NULL, '1', '2021-01-08 21:00:29'),(6, 101, 2, NULL, NULL, '2021-01-08 21:03:13'),
    (7, 105, 2, NULL, '1', '2021-01-08 21:20:29'),
    (8, 102, 1, NULL, NULL, '2021-01-09 23:54:33'),
    (9, 103, 1, '4', '1,5', '2021-01-10 11:22:59'),
    (10, 104, 1, NULL, NULL, '2021-01-11 18:34:49'),
    (10, 104, 1, '2,6', '1,4', '2021-01-11 18:34:49');

select * from customer_orders;
select * from driver_order;
select * from ingredients;
select * from driver;
select * from rolls;
select * from rolls_recipes;

--- how many of each type of roll was delivered?

select * from
(select *, case when cancellation in ('Cancellation', 'Customer Cancellation') then 'c' else 'nc' end order_cancel_det from driver_order)a
where order_cancel_det = 'nc';

select * from customer_orders where order_id in (
select order_id from
(select *, case when cancellation in ('Cancellation', 'Customer Cancellation') then 'c' else 'nc' end order_cancel_det from driver_order)a
where order_cancel_det = 'nc');

select roll_id, count(roll_id) from customer_orders 
where order_id in (select order_id from
(select *, case when cancellation in ('Cancellation', 'Customer Cancellation') then 'c' else 'nc' end order_cancel_det from driver_order)a
where order_cancel_det = 'nc')
group by roll_id;

select * from rolls ;

with x as
(select roll_id, count(roll_id) as roll_count from customer_orders 
where order_id in (select order_id from
(select *, case when cancellation in ('Cancellation', 'Customer Cancellation') then 'c' else 'nc' end order_cancel_det from driver_order)a
where order_cancel_det = 'nc')
group by roll_id)
SELECT rolls.*, x.roll_count
FROM rolls
JOIN x ON rolls.roll_id = x.roll_id;

--- How many veg & and non-veg were ordered by each customer?

with a as (
select customer_id, roll_id, count(customer_id) roll_count from customer_orders
group by customer_id, roll_id) 
select a.customer_id,a.roll_id,a.roll_count, rolls.roll_name
from rolls
join a on rolls.roll_id = a.roll_id;


--- What was the max number of rolls delivered in a single order

select * from (
select *, rank() over (order by ccount desc) rankk from (
select order_id, count(roll_id) as ccount from (
select * from customer_orders where order_id in (select order_id from
(select *, case when cancellation in ('Cancellation', 'Customer Cancellation') then 'c' else 'nc' end order_cancel_det from driver_order)a
where order_cancel_det = 'nc'))b
group by order_id )c)d
where rankk = 1


--- For each customer, how many delivered rolls had atleast 1 change and how many had no change?

---creting temp table;

with temp_customer_orders (order_id,customer_id,roll_id,not_include_items,extra_items_included,order_date) AS
(
select order_id,customer_id,roll_id,
case when not_include_items is null or not_include_items = '' then '0' else not_include_items end as new_not_include_items,
case when extra_items_included is null or extra_items_included = '' or extra_items_included = 'NaN' then '0' else extra_items_included end as new_extra_include_items,
order_date from customer_orders)
select * from temp_customer_orders; 

with temp_driver_order (order_id,driver_id,pickup_time,distance,duration,cancellation) as
(select order_id,driver_id,pickup_time,distance,duration,
case when cancellation in ('Cancellation','Customer Cancellation') then 0 else 1 end as new_cancellation
from driver_order)
select * from temp_driver_order;

select * from temp_customer_orders where order_id in (
select order_id from temp_driver_order where new_cancellation!=0);

--- For each customer, how many delivered rolls had atleast 1 change and how many had no change?

with temp_customer_orders AS
(
select order_id,customer_id,roll_id,
case when not_include_items is null or not_include_items = '' then '0' else not_include_items end as new_not_include_items,
case when extra_items_included is null or extra_items_included = '' or extra_items_included = 'NaN' then '0' else extra_items_included end as new_extra_include_items,
order_date from customer_orders),
temp_driver_order as
(select order_id,driver_id,pickup_time,distance,duration,
case when cancellation in ('Cancellation','Customer Cancellation') then 0 else 1 end as new_cancellation
from driver_order)

select customer_id, chg_no_chg, count(order_id) at_least_1_change from(
select *, case when new_not_include_items='0' and new_extra_include_items='0' then 'no change' else 'change' end as chg_no_chg 
from temp_customer_orders where order_id in (
select order_id from temp_driver_order where new_cancellation!=0))a
group by customer_id, chg_no_chg;


--- How many rolls were delivered that has both exclusion and extras?

with temp_customer_orders (order_id,customer_id,roll_id,new_not_include_items,new_extra_include_items,order_date) AS
(
select order_id,customer_id,roll_id,
case when not_include_items is null or not_include_items = '' then '0' else not_include_items end as new_not_include_items,
case when extra_items_included is null or extra_items_included = '' or extra_items_included = 'NaN' then '0' else extra_items_included end as new_extra_include_items,
order_date from customer_orders),
temp_driver_order (order_id,driver_id,pickup_time,distance,duration,new_cancellation)  as
(select order_id,driver_id,pickup_time,distance,duration,
case when cancellation in ('Cancellation','Customer Cancellation') then 0 else 1 end as new_cancellation
from driver_order) 
select chg_no_chg, count(chg_no_chg) from(
select *, case when new_not_include_items!='0' and new_extra_include_items!='0' then 'BOTH INC EXC' else 'EITHER 1 INC OR EXC' end as chg_no_chg 
from temp_customer_orders where order_id in (
select order_id from temp_driver_order where new_cancellation!='0'))b
group by chg_no_chg;

--- what was the total number of rolls ordered for each hour of the day?
 
select hr, count(hr) as hr_count from (
select *, concat(cast(hour(order_date) as char), '-', cast(hour(order_date)+1 as char)) as hr from customer_orders) a
group by hr
order by hr_count desc;

--- what was the total number of rolls ordered for each day of the day?
 
 select day_bucket, count(day_bucket) as count_day_bucket from (
select *, dayname(order_date) as day_bucket from customer_orders) c
group by day_bucket 
order by count_day_bucket desc; 


--- What is the avg time in minutes it took for each order to arrive FASOS HQ to pickup the order?

select driver_id, sum(diff)/ count(diff) from(
select * from (
select *, row_number() over(partition by order_id order by diff) as rnk from (
select a.order_id, a.customer_id, a.roll_id, a.order_date, 
b.driver_id, b.pickup_time, b.distance, b.duration,
timestampdiff(minute, a.order_date, b.pickup_time) as diff
from customer_orders a join driver_order b on a.order_id = b.order_id
where b.pickup_time is not null) a) b where rnk = 1) c
group by driver_id;


-- Is there any relationship between the number of rolls and how long the order takes to prepare

select order_id, count(roll_id) as roll_count, avg(diff) as time_taken from (
select a.order_id, a.customer_id, a.roll_id, a.order_date, 
b.driver_id, b.pickup_time, b.distance, b.duration,
timestampdiff(minute, a.order_date, b.pickup_time) as diff
from customer_orders a join driver_order b on a.order_id = b.order_id
where b.pickup_time is not null) a 
group by order_id;

-- what is the avg distance travelled by each customer;

select customer_id, avg(distance) from (
select * from (
select *, row_number() over(partition by order_id order by diff) as rnk from (
select a.order_id, a.customer_id, a.roll_id, a.order_date, 
b.driver_id, b.pickup_time, b.distance, b.duration,
timestampdiff(minute, a.order_date, b.pickup_time) as diff
from customer_orders a join driver_order b on a.order_id = b.order_id
where b.pickup_time is not null) a) b where rnk = 1) d
group by customer_id;

-- What is the difference between the longest and shortest delivery times for all orders?

select max(duration)-min(duration) from (
SELECT duration, 
CASE WHEN duration LIKE '%min%' THEN LEFT(duration, LOCATE('m', duration) - 1) ELSE duration END AS new_duration 
FROM driver_order WHERE duration IS NOT NULL)a;

-- what is the avg speed for each driver for each delivery and do you notice any trend for these values

select a.order_id, a.driver_id, round(a.distance/a.new_duration,3) as speed, b.roll_count from (
select order_id, driver_id, distance, pickup_time, 
case when duration like '%min%' then left(duration, locate('m', duration)-1) else duration end as new_duration,
row_number() over(partition by driver_id) as rnk
from driver_order where distance is not null)a join 
(select order_id, count(roll_id) as roll_count from customer_orders group by order_id)b 
on a.order_id = b.order_id
order by roll_count asc;

-- what is the successfull delivery percentage for each driver?

select driver_id, round(sum(new_cancellation)*100/count(driver_id),2) as 'successfull delivery percentage' from (
select driver_id, case when lower(cancellation) like '%cancel%'  then 0 else 1 end as new_cancellation from driver_order)a
group by driver_id

#END OF Queries!!
